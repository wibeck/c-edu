#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
/**
 * Hello OpenMP World prints the number of threads and the current thread id
 */
int main (int argc, char *argv[]) {

  int i;
  int nums[] { 3, 4, 5, 6, 1, 9};
  int nums2[]{ 5, 4, 3, 2, 7, -1};
	int nums3[] { 3, 4, 5, 6, 1, 9};
	int share = 5;
	
	
  printf("Adding in a simple for-Loop: \n");
	#pragma omp parallel
		#pragma omp for 
		for(i = 0; i < 5; i++) {
			printf("Adding %d and %d \n", nums[i], nums2[i]);
			nums[i] += nums2[i];
		} 
	
	for( i = 0; i < 5; i++) {
		printf("%d ", nums[i]);
	}
	
	 printf("\n Adding in a simple for-Loop with shared vars: \n");
	#pragma omp parallel shared(share)
		#pragma omp for 
		for(i = 0; i < 5; i++) {
			printf("Adding %d and %d \n", nums3[i], nums2[i]);
			nums3[i] += nums2[i] + share;
		} 
	
	
	for( i = 0; i < 5; i++) {
		printf("%d ", nums3[i]);
	}
	
	 printf("\n Calculating the scalar-product of nums x nums3 via reduction \n");
	int sum = 0;
	#pragma omp parallel shared(share) reduction(+:sum)
		#pragma omp for 
		for(i = 0; i < 5; i++) {
			printf("Adding %d * %d \n", nums[i], nums3[i]);
			sum += nums[i] * nums3[i];
		} 
	
	
	
		printf("the scalar-product of nums X nums3 is: %d ", sum);
	
 return 0;
}
